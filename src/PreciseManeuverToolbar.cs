/*******************************************************************************
 * Copyright (c) 2016, George Sedov
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

using System;
using System.Collections.Generic;
using KSP.UI;
using KSP.UI.Screens;
using UnityEngine;

namespace KSPPreciseManeuver {
using UI;
[KSPAddon(KSPAddon.Startup.Flight, false)]
class PreciseManeuverToolbar : MonoBehaviour, IMenuControl {

  private ApplicationLauncherButton appButton;
  private Texture2D appButtonTexture;

  private ToolbarMenu m_ToolbarMenu;
  private GameObject m_MenuObject;
  private GameObject m_MenuPrefab = PreciseManeuverConfig.Instance.prefabs.LoadAsset<GameObject>("PreciseManeuverMenu");


  public bool IsMainWindowVisible {
    get { return PreciseManeuverConfig.Instance.showMainWindow; }

    set { PreciseManeuverConfig.Instance.showMainWindow = value; }
  }

  public bool IsKeybindingsVisible {
    get { return PreciseManeuverConfig.Instance.showKeymapperWindow; }

    set { PreciseManeuverConfig.Instance.showKeymapperWindow = value; }
  }

  /// <summary>
  ///     Clamps the given rect transform within the screen bounds.
  /// </summary>
  public void ClampToScreen(RectTransform rectTransform) {
    UIMasterController.ClampToScreen(rectTransform, Vector2.zero);
  }

  private class SectionModule : ISectionControl {
    PreciseManeuverConfig.ModuleType _type;

    internal SectionModule(PreciseManeuverConfig.ModuleType type) {
      _type = type;
    }
    public bool IsVisible {
      get { return PreciseManeuverConfig.Instance.getModuleState(_type); }

      set { PreciseManeuverConfig.Instance.setModuleState(_type, value); }
    }

    public string Name {
      get { return PreciseManeuverConfig.getModuleName(_type); }
    }
  }

  public IList<ISectionControl> GetSections() {
    var rez = new List<ISectionControl>();
    foreach (PreciseManeuverConfig.ModuleType type in Enum.GetValues(typeof(PreciseManeuverConfig.ModuleType)))
      rez.Add(new SectionModule(type));
      return rez;
  }

  /// <summary>
  ///     Gets or sets the toggle button state.
  /// </summary>
  public bool IsOn {
    get {
      return appButton != null &&
             appButton.toggleButton.Button.interactable &&
             appButton.toggleButton.CurrentState == UIRadioButton.State.True;
    }
    set {
      if (appButton == null) {
        return;
      }

      if (value) {
        SetOn();
      } else {
        SetOff();
      }
    }
  }

  /// <summary>
  ///     Disables the button if not already disabled.
  /// </summary>
  public void Disable() {
    if (appButton != null && appButton.toggleButton.Button.interactable)
      appButton.Disable();
  }

  /// <summary>
  ///     Enables the button if not already enabled.
  /// </summary>
  public void Enable() {
    if (appButton != null && appButton.toggleButton.Button.interactable == false)
      appButton.Enable();
  }

  /// <summary>
  ///     Gets the anchor position for pop-up content.
  /// </summary>
  public Vector3 GetAnchor() {
    if (appButton == null)
      return Vector3.zero;

    Vector3 anchor = appButton.GetAnchor();

    anchor.x -= 3.0f;

    return anchor;
  }

  /// <summary>
  ///     Enables and sets the button to off.
  /// </summary>
  public void SetOff() {
    Enable();

    if (appButton != null && appButton.toggleButton.CurrentState != UIRadioButton.State.False)
      appButton.SetFalse();
  }

  /// <summary>
  ///     Enables and sets the button to on.
  /// </summary>
  public void SetOn() {
    Enable();

    if (appButton != null && appButton.toggleButton.CurrentState != UIRadioButton.State.True)
      appButton.SetTrue();
  }


  internal void Awake() {
    // cache icon texture
    if (appButtonTexture == null) {
      appButtonTexture = new Texture2D(36, 36);
      appButtonTexture.LoadImage(new byte[] {
    0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
    0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x24,0x08,0x06,0x00,0x00,0x00,0xE1,0x00,0x98,
    0x98,0x00,0x00,0x03,0x44,0x49,0x44,0x41,0x54,0x58,0xC3,0xED,0x98,0xED,0x6B,0xCD,
    0x61,0x18,0xC7,0xBF,0xF7,0xD9,0x30,0x9B,0x99,0x9A,0x87,0xB1,0x18,0x1A,0x12,0x62,
    0x66,0xE4,0x29,0x8A,0xF2,0x50,0x28,0x84,0xD4,0x5E,0x90,0x64,0xAD,0x24,0xEF,0x78,
    0xA3,0x29,0xC9,0x0B,0x0F,0x79,0xE3,0xA9,0xE4,0x0F,0x90,0xA7,0xA6,0x90,0x24,0x6A,
    0x62,0x2D,0x8A,0x4D,0x1E,0xCA,0x29,0x8A,0x61,0x91,0x8D,0x2C,0xD9,0xC7,0x9B,0xEB,
    0xD4,0xBD,0xDF,0x7E,0xBF,0xDF,0xCE,0x6C,0x6B,0x79,0xB8,0xEA,0x74,0x9F,0x73,0x9D,
    0xEF,0xF9,0xDE,0xD7,0x7D,0xDD,0xDF,0xFB,0xBA,0xEE,0xDF,0x91,0xFE,0xDB,0xBF,0x62,
    0x80,0xEB,0x8A,0x3F,0x5D,0x73,0x3D,0x10,0xD8,0x1A,0x49,0xD3,0x25,0xBD,0x95,0x74,
    0xC1,0x39,0xD7,0xD4,0x97,0x59,0x9A,0x43,0x7B,0xDB,0xD3,0x5D,0xCE,0x44,0x37,0x7F,
    0x3F,0x3A,0xF0,0x79,0x62,0x5F,0xEB,0x68,0x38,0x50,0xEF,0x65,0x68,0x73,0xAF,0x8A,
    0x16,0xC8,0xB0,0x97,0x8B,0xC1,0x6D,0xB2,0x60,0xEE,0x00,0xB9,0x31,0xB8,0x44,0x3A,
    0xC2,0xCF,0x8C,0x0A,0xC6,0x39,0x87,0xA4,0x9F,0x21,0xBE,0xA0,0x7D,0xB6,0xB1,0xD9,
    0xC7,0x77,0x38,0x3D,0xCE,0xB5,0x79,0xEF,0x89,0xE2,0x4B,0x84,0xAD,0xC4,0x7E,0x30,
    0x0A,0x38,0x08,0x54,0x02,0x03,0x52,0x24,0x9D,0x9C,0xD8,0x1F,0x51,0x65,0x00,0x58,
    0x0C,0x5C,0x07,0xCE,0x00,0x43,0xD2,0xE0,0xEB,0x40,0x70,0xD2,0xD3,0xC6,0xE1,0x18,
    0xFC,0x2A,0xC3,0xDC,0x04,0x06,0x87,0x6D,0x0B,0x30,0x02,0x68,0xF0,0xF8,0xAA,0x82,
    0xDB,0xE8,0x13,0x6E,0x0B,0xF1,0x95,0x01,0x5F,0x3D,0x82,0x56,0x60,0x7B,0x60,0x92,
    0x61,0x40,0x05,0xF0,0xC8,0xC3,0x3D,0xB0,0x8C,0xE6,0x78,0xB8,0x42,0xE0,0x6C,0xA0,
    0x3C,0xD4,0x02,0xFD,0xA3,0x56,0xB8,0xCF,0xC6,0xFD,0xC0,0x71,0x60,0x11,0x50,0x04,
    0xDC,0xA2,0xA3,0x5D,0x02,0x4A,0x80,0x19,0xC0,0x43,0xCF,0xFF,0x09,0x68,0x09,0xE0,
    0xA6,0x02,0x5B,0x81,0xD7,0x01,0x8E,0x8F,0xC0,0xF6,0x28,0x71,0xA7,0xB6,0x27,0x43,
    0xD2,0x5A,0x49,0x1B,0x25,0x15,0x4A,0xCA,0x91,0x74,0xD2,0xBE,0xEF,0x2F,0x29,0x5F,
    0xD2,0x2E,0xF3,0x7F,0x94,0xF4,0x55,0x52,0x91,0xA4,0xA4,0xA4,0x23,0x92,0x6A,0x25,
    0xB5,0x49,0x5A,0x20,0xA9,0x4A,0xD2,0x20,0x49,0xEF,0x24,0x15,0xD8,0x3C,0xF7,0x24,
    0x9D,0x90,0xD4,0x22,0x29,0xE9,0x9C,0x7B,0x18,0xA7,0x99,0x8C,0xC0,0xE7,0x31,0xC0,
    0x36,0x60,0x36,0x30,0xC4,0xD2,0x7B,0x15,0x38,0x6C,0x63,0xCA,0x9E,0x01,0x25,0x11,
    0x9A,0x4A,0x6D,0xF7,0x7B,0xDB,0xD6,0xDC,0x1E,0xEB,0x77,0xD6,0x1E,0xF6,0xDA,0x09,
    0x69,0x00,0x1A,0x6D,0xB2,0xD3,0xB6,0x75,0x39,0x56,0xB3,0x7C,0x7D,0x1D,0x30,0x4C,
    0x75,0x6F,0x57,0xE6,0x12,0xA0,0x0D,0xF8,0x00,0xD4,0x01,0xF7,0xED,0x74,0x1D,0xB3,
    0x32,0x91,0x6D,0x01,0x2E,0xB7,0x80,0x1E,0x75,0x75,0x8E,0xCC,0x2E,0xE2,0x5B,0x4C,
    0x57,0xCD,0xA6,0xB9,0x6C,0x49,0x73,0x25,0x8D,0x35,0xFF,0x4A,0x49,0x7B,0x25,0x7D,
    0x31,0x7C,0x01,0x90,0xE5,0x9C,0xFB,0xDE,0x5B,0x19,0xCA,0xB2,0x53,0x02,0xB0,0x3C,
    0xE4,0xFB,0x11,0xC0,0x6A,0xE0,0xA2,0x61,0x9A,0xAC,0xF5,0x6C,0x00,0xCE,0x99,0x36,
    0x4B,0x81,0xDC,0x28,0x1D,0x25,0x62,0xFA,0x58,0x22,0xE0,0x1B,0x28,0x69,0x8B,0x65,
    0x45,0x92,0x2A,0x81,0x7E,0x81,0xF6,0xD0,0x28,0xA9,0x46,0x52,0x9E,0xB9,0x1A,0x25,
    0x95,0x49,0xFA,0x20,0xE9,0x9B,0xA4,0xF5,0x92,0xCE,0x4B,0x3A,0x6A,0x9C,0x5B,0x4C,
    0x9F,0x4B,0x81,0x29,0xC0,0xD0,0xD8,0x1B,0x9F,0xE9,0x62,0xB2,0xAD,0xFA,0x4E,0x48,
    0x5D,0x3A,0x01,0x14,0xD8,0x02,0xB2,0xEC,0x00,0xDC,0x0C,0x60,0x5A,0xAD,0x05,0x8D,
    0xB3,0xDB,0x41,0x31,0x30,0xC9,0xF8,0x2B,0x81,0xDB,0x56,0x50,0x6B,0x80,0x43,0x71,
    0x9D,0xBE,0x02,0x78,0x02,0xBC,0x32,0x21,0x03,0xBC,0xB1,0x62,0xB7,0xD3,0x9B,0xF0,
    0x25,0x50,0x6D,0xC4,0xAD,0xE6,0x7B,0x07,0xEC,0x08,0xB4,0x9F,0xE7,0x56,0x42,0xEE,
    0x02,0x6B,0xFC,0x93,0x09,0xE4,0x01,0x33,0x81,0x59,0x51,0x01,0xCD,0x02,0x9A,0x03,
    0x2B,0x3D,0x05,0x8C,0x0F,0x5C,0x3B,0xEA,0x43,0xB2,0x76,0xD9,0xAF,0x4F,0xC0,0x5A,
    0xE0,0x69,0x00,0x53,0x0F,0x8C,0x4C,0x5D,0x6F,0xD2,0x11,0x6F,0x21,0xF0,0xD8,0x23,
    0xB8,0x11,0x83,0xDD,0x6D,0x98,0x3A,0xA0,0x34,0x02,0x33,0xCD,0x8A,0x64,0xCA,0xAE,
    0x01,0x03,0xD2,0x3D,0x49,0x19,0x36,0xAE,0xB3,0x2D,0x7A,0x00,0xCC,0x8F,0xEA,0xCE,
    0x26,0x48,0xAC,0x8A,0x27,0x62,0x78,0xCB,0x81,0xA4,0x65,0x6B,0x5E,0x58,0x97,0x48,
    0x27,0xB8,0x09,0xA1,0xCA,0x6F,0x8F,0x59,0xE6,0x05,0x94,0xDD,0x09,0x76,0x2C,0x50,
    0xFC,0xDB,0x85,0xD1,0x39,0xF7,0xC2,0xBB,0xB4,0xB5,0x45,0xC0,0xF2,0x6D,0x1C,0x1C,
    0xC7,0x67,0x1C,0xC9,0x4E,0x6E,0x9F,0xDD,0x2E,0x94,0x05,0xD6,0x64,0x53,0x56,0xDE,
    0xD7,0x8F,0x41,0x0B,0x03,0x8F,0x3E,0x4B,0xFA,0x3A,0xA0,0xA4,0x24,0x3F,0xF5,0xF5,
    0xDD,0x0D,0xA8,0x27,0x1E,0xA5,0x57,0x48,0x9A,0x6A,0x6D,0xE2,0x8A,0x73,0xEE,0xF3,
    0x5F,0xF5,0x67,0xC3,0x7F,0xFB,0xE3,0xEC,0x17,0x05,0x3B,0x7C,0xC9,0xE2,0x11,0x7D,
    0x4A,0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,0xAE,0x42,0x60,0x82});
    }

    // subscribe event listeners
    GameEvents.onGUIApplicationLauncherReady.Add(OnGUIApplicationLauncherReady);
    GameEvents.onGUIApplicationLauncherUnreadifying.Add(OnGUIApplicationLauncherUnreadifying);
  }

  protected virtual void OnDestroy() {
    // unsubscribe event listeners
    GameEvents.onGUIApplicationLauncherReady.Remove(OnGUIApplicationLauncherReady);
    GameEvents.onGUIApplicationLauncherUnreadifying.Remove(OnGUIApplicationLauncherUnreadifying);
  }

  private void OnGUIApplicationLauncherReady() {
    if (!NodeTools.patchedConicsUnlocked)
      return;
    // create button
    if (ApplicationLauncher.Instance != null)
      appButton = ApplicationLauncher.Instance.AddModApplication(OnTrue, OnFalse, OnHover, OnHoverOut, Enable, Disable,
                                                                 ApplicationLauncher.AppScenes.MAPVIEW, appButtonTexture);
  }

  private void OnGUIApplicationLauncherUnreadifying(GameScenes scene) {
    // remove button
    if (ApplicationLauncher.Instance != null && appButton != null)
      ApplicationLauncher.Instance.RemoveModApplication(appButton);
  }

  protected void OnFalse() {
    Close();
  }

  protected void OnHover() {
    Open();
  }

  protected void OnHoverOut() {
    if (IsOn == false)
      Close();
  }

  protected void OnTrue() {
    Open();
  }

  private void Close() {
    if (m_ToolbarMenu != null) {
      if (!m_ToolbarMenu.IsFadingOut)
        m_ToolbarMenu.fadeClose();
    } else if (m_MenuObject != null) {
      Destroy(m_MenuObject);
    }
  }

  private void Open() {
    // fade menu in if already open
    if (m_ToolbarMenu != null) {
      m_ToolbarMenu.FadeIn();
      return;
    }

    if (m_MenuPrefab == null || m_MenuObject != null)
      return;

    m_MenuObject = Instantiate(m_MenuPrefab, GetAnchor(), Quaternion.identity) as GameObject;
    if (m_MenuObject == null)
      return;

    m_MenuObject.transform.SetParent(MainCanvasUtil.MainCanvas.transform);
    m_ToolbarMenu = m_MenuObject.GetComponent<ToolbarMenu>();
    if (m_ToolbarMenu != null)
      m_ToolbarMenu.SetMenuControl(this);
    StyleManager.Process(m_MenuObject);
  }

  public void registerUpdateAction (Action action) {
    PreciseManeuverConfig.Instance.listenToShowChange (action);
  }

  public void deregisterUpdateAction (Action action) {
    PreciseManeuverConfig.Instance.removeListener (action);
  }
}
}
