/*******************************************************************************
 * Copyright (c) 2016, George Sedov
 * All rights reserved.
 *
 * Redistribution and use in source and binary forms, with or without
 * modification, are permitted provided that the following conditions are met:
 *
 * 1. Redistributions of source code must retain the above copyright notice,
 * this list of conditions and the following disclaimer.
 *
 * 2. Redistributions in binary form must reproduce the above copyright notice,
 * this list of conditions and the following disclaimer in the documentation
 * and/or other materials provided with the distribution.
 *
 * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
 * AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
 * IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
 * ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
 * LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
 * CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
 * SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
 * INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
 * CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
 * ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
 * POSSIBILITY OF SUCH DAMAGE.
 ******************************************************************************/

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using KSP.UI;
using KSP.UI.Screens;
using UnityEngine;

namespace KSPPreciseManeuver {
using UI;
[KSPAddon(KSPAddon.Startup.Flight, false)]
class PreciseManeuverToolbar : MonoBehaviour, IMenuAppLauncher {

  private ApplicationLauncherButton appButton;
  private Texture2D appButtonTexture;

  private ToolbarMenu m_ToolbarMenu;
  private GameObject m_MenuObject;
  private GameObject m_MenuPrefab;


  public bool IsMainWindowVisible {
    get { return PreciseManeuverConfig.getInstance().showMainWindow; }

    set { PreciseManeuverConfig.getInstance().showMainWindow = value; }
  }

  public bool IsKeybindingsVisible {
    get { return PreciseManeuverConfig.getInstance().showKeymapperWindow; }

    set { PreciseManeuverConfig.getInstance().showKeymapperWindow = value; }
  }


  /// <summary>
  ///     Applies the KSP theme to a game object and its children.
  /// </summary>
  public void ApplyTheme(GameObject gameObject) {
    StyleManager.Process(gameObject);
  }

  /// <summary>
  ///     Clamps the given rect transform within the screen bounds.
  /// </summary>
  public void ClampToScreen(RectTransform rectTransform) {
    UIMasterController.ClampToScreen(rectTransform, Vector2.zero);
  }

  private class SectionModule : ISectionModule {
    PreciseManeuverConfig.ModuleType _type;

    internal SectionModule(PreciseManeuverConfig.ModuleType type) {
      _type = type;
    }
    public bool IsVisible {
      get { return PreciseManeuverConfig.getInstance().getModuleState(_type); }

      set { PreciseManeuverConfig.getInstance().setModuleState(_type, value); }
    }

    public string Name {
      get { return PreciseManeuverConfig.getModuleName(_type); }
    }
  }

  public IList<ISectionModule> GetSections() {
    var rez = new List<ISectionModule>();
    foreach (PreciseManeuverConfig.ModuleType type in Enum.GetValues(typeof(PreciseManeuverConfig.ModuleType)))
      rez.Add(new SectionModule(type));
      return rez;
  }

  /// <summary>
  ///     Gets or sets the toggle button state.
  /// </summary>
  public bool IsOn {
    get {
      return appButton != null &&
             appButton.toggleButton.Button.interactable &&
             appButton.toggleButton.CurrentState == UIRadioButton.State.True;
    }
    set {
      if (appButton == null) {
        return;
      }

      if (value) {
        SetOn();
      } else {
        SetOff();
      }
    }
  }

  /// <summary>
  ///     Disables the button if not already disabled.
  /// </summary>
  public void Disable() {
    if (appButton != null && appButton.toggleButton.Button.interactable)
      appButton.Disable();
  }

  /// <summary>
  ///     Enables the button if not already enabled.
  /// </summary>
  public void Enable() {
    if (appButton != null && appButton.toggleButton.Button.interactable == false)
      appButton.Enable();
  }

  /// <summary>
  ///     Gets the anchor position for pop-up content.
  /// </summary>
  public Vector3 GetAnchor() {
    if (appButton == null)
      return Vector3.zero;

    Vector3 anchor = appButton.GetAnchor();

    anchor.x -= 3.0f;

    return anchor;
  }

  /// <summary>
  ///     Enables and sets the button to off.
  /// </summary>
  public void SetOff() {
    Enable();

    if (appButton != null && appButton.toggleButton.CurrentState != UIRadioButton.State.False)
      appButton.SetFalse();
  }

  /// <summary>
  ///     Enables and sets the button to on.
  /// </summary>
  public void SetOn() {
    Enable();

    if (appButton != null && appButton.toggleButton.CurrentState != UIRadioButton.State.True)
      appButton.SetTrue();
  }


  internal void Awake() {
    // cache icon texture
    if (appButtonTexture == null) {
      appButtonTexture = new Texture2D(36, 36);
      appButtonTexture.LoadImage(new byte[] {
  0x89,0x50,0x4E,0x47,0x0D,0x0A,0x1A,0x0A,0x00,0x00,0x00,0x0D,0x49,0x48,0x44,0x52,
  0x00,0x00,0x00,0x24,0x00,0x00,0x00,0x24,0x08,0x02,0x00,0x00,0x00,0x6E,0x62,0x0F,
  0xCF,0x00,0x00,0x00,0x01,0x73,0x52,0x47,0x42,0x00,0xAE,0xCE,0x1C,0xE9,0x00,0x00,
  0x00,0x04,0x67,0x41,0x4D,0x41,0x00,0x00,0xB1,0x8F,0x0B,0xFC,0x61,0x05,0x00,0x00,
  0x00,0x09,0x70,0x48,0x59,0x73,0x00,0x00,0x0E,0xC3,0x00,0x00,0x0E,0xC3,0x01,0xC7,
  0x6F,0xA8,0x64,0x00,0x00,0x02,0x79,0x49,0x44,0x41,0x54,0x58,0x47,0xED,0x95,0x5B,
  0x73,0xDA,0x30,0x10,0x85,0xFB,0xFF,0xFF,0x11,0xE8,0x62,0xD9,0xC6,0x17,0x42,0xCA,
  0xC5,0x06,0x63,0x02,0x09,0xD0,0xA6,0x19,0x48,0xB8,0x14,0xCA,0x34,0x13,0x08,0x51,
  0x8F,0x64,0x01,0x81,0x64,0x86,0x64,0x86,0xE6,0x89,0xF3,0xC0,0xA0,0xB3,0x6B,0x7F,
  0xAB,0xF5,0xCA,0xFE,0x26,0xBF,0x50,0x67,0xD8,0x49,0x74,0x86,0x9D,0x44,0x67,0xD8,
  0x49,0xB4,0x83,0x05,0x7E,0xC1,0x79,0x25,0xDF,0xF7,0xE3,0x7A,0x7D,0xF2,0x7B,0x66,
  0xC2,0x5A,0x69,0x12,0x0B,0x21,0xB2,0x84,0x66,0xAB,0x6D,0xDC,0x7D,0xDD,0xFD,0xEC,
  0xDB,0xB6,0x8D,0x04,0x5B,0x88,0x38,0x49,0x8D,0xAB,0xB5,0x81,0xAD,0x97,0xF9,0x3C,
  0x51,0x19,0xB6,0xCD,0xB4,0x2C,0xCB,0xC2,0x7D,0x09,0xC9,0x47,0xF5,0xA6,0xC9,0x91,
  0x52,0x70,0x82,0x04,0x25,0xC7,0xC9,0xE7,0xF3,0x93,0xD9,0x1F,0x13,0xD8,0x69,0x9D,
  0xCB,0xE5,0x4C,0x8E,0x6D,0x13,0x6E,0x1B,0x5B,0x6B,0x0B,0x5B,0x51,0x4A,0x01,0xF3,
  0x82,0x70,0x34,0x1A,0x0D,0x87,0xC3,0xB4,0x99,0x00,0x09,0x07,0xBC,0xC1,0xC3,0x24,
  0xCB,0x72,0x04,0x03,0xC6,0x0F,0x02,0x14,0x85,0x52,0xA2,0xC6,0x5E,0xE1,0xD0,0xAF,
  0x1F,0x3D,0xCE,0x2D,0xD4,0x12,0x04,0x3E,0x2A,0x67,0xC2,0x31,0x01,0xAD,0x3D,0x18,
  0x6A,0x09,0x8A,0x97,0xC6,0x91,0xB2,0xDB,0xB9,0xD2,0xDB,0x13,0xE5,0x6A,0x9C,0x39,
  0xAE,0xE0,0xC8,0x09,0x4B,0xE5,0x66,0xBD,0x06,0x9F,0x52,0x96,0xF9,0x5B,0x05,0x9E,
  0x83,0x96,0xA0,0x88,0x72,0x29,0x44,0x26,0x17,0xAE,0x09,0x68,0x1D,0xC2,0xFC,0x62,
  0xC9,0x38,0x52,0x2E,0xE6,0x53,0xC6,0xD4,0xDD,0x83,0x0B,0x53,0x41,0x06,0xF3,0xC2,
  0xD2,0x6C,0x3A,0x62,0x1C,0x62,0x83,0xFB,0x71,0x16,0x82,0x9E,0x1E,0x17,0x84,0x52,
  0x98,0x93,0xD9,0xA2,0x14,0x7A,0x9F,0x83,0x4D,0x47,0xF7,0xB8,0x1F,0xFA,0x75,0x59,
  0xA9,0x65,0x4E,0x06,0x73,0xFD,0x10,0xFF,0x29,0x21,0x2A,0x54,0x36,0x21,0xA8,0xD3,
  0x4A,0xB0,0x2D,0xA2,0xB7,0x1B,0x7A,0xEE,0x71,0xD8,0x76,0x13,0x50,0x31,0xF4,0xD5,
  0x05,0x9C,0x75,0xFB,0xB7,0x99,0x63,0x60,0x9E,0x82,0x45,0xD5,0xEF,0x7A,0x82,0xC8,
  0x4B,0x16,0x93,0xD2,0xE2,0x4C,0x58,0x56,0x4D,0x0F,0xD4,0x71,0x18,0xC6,0xC1,0x2D,
  0x14,0xEA,0x71,0x1C,0x45,0x35,0x5C,0x26,0x90,0x2E,0x04,0xE3,0xC2,0xE4,0xEC,0xC3,
  0xC6,0x0F,0x03,0x74,0xD2,0xE2,0xBC,0x7F,0x7B,0x87,0x25,0xDA,0x80,0x9E,0x33,0x46,
  0xC7,0xD3,0x39,0x96,0xC7,0x61,0xAE,0xEB,0xAA,0x11,0xD2,0x42,0x03,0x29,0x25,0xAE,
  0xE7,0xAF,0xD6,0xDB,0xD2,0xF7,0x60,0x90,0xEA,0xA4,0x7A,0x84,0x17,0xF8,0x1F,0x55,
  0xD4,0x46,0x99,0x65,0x2A,0xFB,0xD0,0xCE,0x0A,0x9E,0xDF,0x69,0xB7,0xD3,0x34,0xED,
  0xF5,0xFB,0xB3,0xF9,0xE1,0x31,0x3A,0x80,0x35,0xA2,0xAA,0x9E,0x49,0xBA,0x5C,0x3D,
  0x33,0x4A,0xD1,0x8C,0x64,0x73,0xD2,0x3F,0xFD,0xCC,0xDE,0xEA,0x00,0x36,0x1D,0x0D,
  0xD1,0x02,0x75,0x3A,0x3D,0x0F,0xBF,0xB8,0xC3,0x7C,0xF1,0x98,0x85,0x3E,0x04,0x7B,
  0x3D,0x8D,0x6F,0x75,0x00,0x83,0x38,0x53,0xFD,0xD0,0xB2,0x85,0x53,0x30,0xEE,0x7F,
  0x82,0x25,0xFA,0x74,0xE3,0x61,0x63,0xE8,0xDB,0xD7,0x3D,0xE3,0x1E,0x83,0x2D,0xF1,
  0x4E,0xC3,0x05,0x05,0xBF,0x68,0x9C,0xF7,0x24,0x18,0x51,0xEF,0x4C,0xC7,0x33,0x6B,
  0x29,0x71,0xBA,0xF1,0x52,0x05,0x0F,0x97,0xFF,0x7D,0x7A,0x36,0xAE,0x94,0x9E,0x83,
  0x27,0x68,0x11,0xB6,0x9B,0x64,0x68,0x03,0x93,0x12,0xF3,0x5E,0xA9,0x54,0xAE,0xBB,
  0x7D,0xB3,0x7E,0x4F,0xED,0x56,0x13,0x39,0xED,0xCE,0x8D,0x59,0x6B,0x25,0x8D,0x7A,
  0xB5,0x5A,0x4D,0xF7,0x3F,0x02,0x37,0x9D,0x2B,0x64,0x1E,0x7C,0x19,0x76,0xB0,0x2F,
  0xD0,0x19,0x76,0x12,0x9D,0x61,0x27,0xD1,0x19,0x76,0x12,0x7D,0x21,0x4C,0xCA,0x7F,
  0x66,0x97,0x71,0x8F,0xDB,0x48,0x58,0xF5,0x00,0x00,0x00,0x00,0x49,0x45,0x4E,0x44,
  0xAE,0x42,0x60,0x82});
    }

    if (m_MenuPrefab == null && PreciseManeuverConfig.getInstance().prefabs != null)
      m_MenuPrefab = PreciseManeuverConfig.getInstance().prefabs.LoadAsset<GameObject>("PreciseManeuverMenu");

    // subscribe event listeners
    GameEvents.onGUIApplicationLauncherReady.Add(OnGUIApplicationLauncherReady);
    GameEvents.onGUIApplicationLauncherUnreadifying.Add(OnGUIApplicationLauncherUnreadifying);
  }

  protected virtual void OnDestroy() {
    // unsubscribe event listeners
    GameEvents.onGUIApplicationLauncherReady.Remove(OnGUIApplicationLauncherReady);
    GameEvents.onGUIApplicationLauncherUnreadifying.Remove(OnGUIApplicationLauncherUnreadifying);
  }

  private void OnGUIApplicationLauncherReady() {
    // create button
    if (ApplicationLauncher.Instance != null)
      appButton = ApplicationLauncher.Instance.AddModApplication(OnTrue, OnFalse, OnHover, OnHoverOut, Enable, Disable,
                                                                 ApplicationLauncher.AppScenes.ALWAYS, appButtonTexture);
  }

  private void OnGUIApplicationLauncherUnreadifying(GameScenes scene) {
    // remove button
    if (ApplicationLauncher.Instance != null && appButton != null)
      ApplicationLauncher.Instance.RemoveModApplication(appButton);
  }






  protected void OnFalse() {
    Close();
  }

  protected void OnHover() {
    Open();
  }

  protected void OnHoverOut() {
    if (IsOn == false)
      Close();
  }

  protected void OnTrue() {
    Open();
  }


  /// <summary>
  ///     Closes the menu.
  /// </summary>
  private void Close() {
    if (m_ToolbarMenu != null) {
      m_ToolbarMenu.Close();
    } else if (m_MenuObject != null) {
      Destroy(m_MenuObject);
    }
  }

  /// <summary>
  ///     Opens the menu.
  /// </summary>
  private void Open() {
    // fade menu in if already open
    if (m_ToolbarMenu != null) {
      m_ToolbarMenu.FadeIn();
      return;
    }
    print(m_ToolbarMenu);

    if (m_MenuPrefab == null || m_MenuObject != null)
      return;

    // create object
    m_MenuObject = Instantiate(m_MenuPrefab, GetAnchor(), Quaternion.identity) as GameObject;
    if (m_MenuObject == null)
      return;

    StyleManager.Process(m_MenuObject);

    // set object as a child of the main canvas
    m_MenuObject.transform.SetParent(MainCanvasUtil.MainCanvas.transform);
    // set menu's reference to this object for cross-communication
    m_ToolbarMenu = m_MenuObject.GetComponent<ToolbarMenu>();
    if (m_ToolbarMenu != null)
      m_ToolbarMenu.SetMenuAppLauncher(this);
  }
}
}
